file.out <- paste0("data_out/result_", public.filename, tag, ".csv")
write.csv(df.res, file.out, row.names = FALSE)
df.res <- read.csv("data_out/result_msci_market_factors_60_2010.csv")
df.res1 <- df.res[order(df.res$value), ]
df.res1 <- df.res1[!(duplicated(df.res1$Type)), ]
df.res1
#### estimated model
# 1) load data -----
if(TRUE) {
files <- c("prep_preqin.R", "prep_public.R")
for(file in files) {
source(file)
if(sys.nframe() == 0L) rm(list = ls())
}
}
if(sys.nframe() == 0L) rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
df.preqin <- read.csv("data_prepared/preqin_cashflows.csv")
public.filename <- "public_returns"
public.filename <- "msci_market_factors"
# public.filename <- "q_factors"
df.public <- read.csv(paste0("data_prepared/", public.filename, ".csv"))
df.preqin$Date <- as.Date(df.preqin$Date)
df.public$Date <- as.Date(df.public$Date)
df0 <- merge(df.preqin, df.public, by="Date")
df0$Fund.ID <- as.factor(df0$Fund.ID)
df0$Alpha <- 1
# 2.1) getNPVs function ----
library(Rcpp)
Rcpp::cppFunction("
NumericVector getNPVs(NumericVector cf, NumericVector ret, int max_quarter){
int n = cf.length();
int i_max = std::min(max_quarter, n);
NumericVector VectorOut(i_max, 0.0);
for(int i = 0; i < i_max; ++i) {
VectorOut[i] = sum(cf / ret * ret[i]);
}
return VectorOut;
}
")
getNPVs(df0[1:1000, 7], df0[1:1000, 5], 10)
# 2.2) err.sqr.calc function ----
library(parallel)
err.sqr.calc <- function(par, max.quarter = 60) {
par0 <-  c("RF" = 1, par)
dfx <- split(df, df$Fund.ID)
f1 <- function(df.ss) {
Return <- exp(cumsum(log(1 + (as.matrix(df.ss[, names(par0)]) %*% par0))))
return(getNPVs(df.ss$CF, Return, max.quarter))
}
npvs <- parallel::mclapply(dfx, f1, mc.cores = 1)
y <- sum(unlist(npvs)^2)
return(y)
}
par <- c("MKT" = 1, "Alpha" = 0.05)
df <- df0[df0$type == "VC", ]
system.time(
print(err.sqr.calc(par)) # 205639240852
)
# 3.0) rbind all ----
rbind.all.columns <- function(x, y) {
x.diff <- setdiff(colnames(x), colnames(y))
y.diff <- setdiff(colnames(y), colnames(x))
x[, c(as.character(y.diff))] <- NA
y[, c(as.character(x.diff))] <- NA
return(rbind(x, y))
}
# 3) iterative run ----
library(optimx)
max.quarters <- c(50, 60)
types <- levels(df0$type)
#types <- c("DD")
factors <- colnames(df.public)[4:ncol(df.public)] # msci_factors
#factors <- colnames(df.public)[3:6] # q_factors
#factors <- c( "ALL", factors)
l <- list()
for (factor in factors) {
for(max.quarter in max.quarters) {
for (type in types) {
print(paste(factor, max.quarter, type))
par <- c("MKT" = 0, "Alpha"=0)
par <- c("MKT" = 1)
if(factor == "ALL") {
for(fac in setdiff(factors, "ALL")) {
par[fac] <- 0
}
} else {
par[factor] <- 0
if ("ALL" %in% factors) break
}
df <- df0[df0$type == type, ]
res <- optimx::optimx(par, err.sqr.calc, max.quarter = max.quarter,
#lower = c("MKT" = -100, "RE" = -100, "Alpha" = -0.01),
#upper = c("MKT" = 100, "RE" = 100, "Alpha" = 0.01),
method = "L-BFGS-B"
#method = c("Nelder-Mead", "L-BFGS-B", "nlminb", "nlm", "ucminf")
#control = list(all.methods=TRUE)
)
res$Factor <- factor
res$Type <- type
res$max.quarter <- max.quarter
l[[paste0(factor, type, max.quarter)]] <- res
}
}
}
df.res <- data.frame(Reduce(rbind.all.columns, l))
tag <- "_5060_2015"
file.out <- paste0("data_out/result_", public.filename, tag, ".csv")
write.csv(df.res, file.out, row.names = FALSE)
df.res <- read.csv("data_out/result_msci_market_factors_60_2010.csv")
df.res1 <- df.res[order(df.res$value), ]
df.res1 <- df.res1[!(duplicated(df.res1$Type)), ]
df.res1
# 4) Grid Search ----
if (FALSE) {
grid <- expand.grid(Alpha = seq(-0.005, 0.005, by=0.0025),
MKT = seq(-2, 2, 0.2),
RE = seq(-2, 2, 0.2))
print(nrow(grid))
val <- c()
for(i in 1:nrow(grid)) {
print(i)
par <- as.numeric(grid[i, ])
names(par) <- names(grid)
val <- c(val, npv.calc(par))
}
grid <- data.frame(grid)
grid$res <- val
g1 <- grid
head(g1[order(g1$res), ])
}
#### estimated model
# 1) load data -----
if(TRUE) {
files <- c("prep_preqin.R", "prep_public.R")
for(file in files) {
source(file)
if(sys.nframe() == 0L) rm(list = ls())
}
}
if(sys.nframe() == 0L) rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
df.preqin <- read.csv("data_prepared/preqin_cashflows.csv")
public.filename <- "public_returns"
public.filename <- "msci_market_factors"
# public.filename <- "q_factors"
df.public <- read.csv(paste0("data_prepared/", public.filename, ".csv"))
df.preqin$Date <- as.Date(df.preqin$Date)
df.public$Date <- as.Date(df.public$Date)
df0 <- merge(df.preqin, df.public, by="Date")
df0$Fund.ID <- as.factor(df0$Fund.ID)
df0$Alpha <- 1
# 2.1) getNPVs function ----
library(Rcpp)
Rcpp::cppFunction("
NumericVector getNPVs(NumericVector cf, NumericVector ret, int max_quarter){
int n = cf.length();
int i_max = std::min(max_quarter, n);
NumericVector VectorOut(i_max, 0.0);
for(int i = 0; i < i_max; ++i) {
VectorOut[i] = sum(cf / ret * ret[i]);
}
return VectorOut;
}
")
getNPVs(df0[1:1000, 7], df0[1:1000, 5], 10)
# 2.2) err.sqr.calc function ----
library(parallel)
err.sqr.calc <- function(par, max.quarter = 60) {
par0 <-  c("RF" = 1, par)
dfx <- split(df, df$Fund.ID)
f1 <- function(df.ss) {
Return <- exp(cumsum(log(1 + (as.matrix(df.ss[, names(par0)]) %*% par0))))
return(getNPVs(df.ss$CF, Return, max.quarter))
}
npvs <- parallel::mclapply(dfx, f1, mc.cores = 1)
y <- sum(unlist(npvs)^2)
return(y)
}
par <- c("MKT" = 1, "Alpha" = 0.05)
df <- df0[df0$type == "VC", ]
system.time(
print(err.sqr.calc(par)) # 205639240852
)
# 3.0) rbind all ----
rbind.all.columns <- function(x, y) {
x.diff <- setdiff(colnames(x), colnames(y))
y.diff <- setdiff(colnames(y), colnames(x))
x[, c(as.character(y.diff))] <- NA
y[, c(as.character(x.diff))] <- NA
return(rbind(x, y))
}
# 3) iterative run ----
library(optimx)
max.quarters <- c(40, 45, 50, 55)
types <- levels(df0$type)
#types <- c("DD")
factors <- colnames(df.public)[4:ncol(df.public)] # msci_factors
#factors <- colnames(df.public)[3:6] # q_factors
#factors <- c( "ALL", factors)
l <- list()
for (factor in factors) {
for(max.quarter in max.quarters) {
for (type in types) {
print(paste(factor, max.quarter, type))
par <- c("MKT" = 0, "Alpha"=0)
par <- c("MKT" = 1)
if(factor == "ALL") {
for(fac in setdiff(factors, "ALL")) {
par[fac] <- 0
}
} else {
par[factor] <- 0
if ("ALL" %in% factors) break
}
df <- df0[df0$type == type, ]
res <- optimx::optimx(par, err.sqr.calc, max.quarter = max.quarter,
#lower = c("MKT" = -100, "RE" = -100, "Alpha" = -0.01),
#upper = c("MKT" = 100, "RE" = 100, "Alpha" = 0.01),
method = "L-BFGS-B"
#method = c("Nelder-Mead", "L-BFGS-B", "nlminb", "nlm", "ucminf")
#control = list(all.methods=TRUE)
)
res$Factor <- factor
res$Type <- type
res$max.quarter <- max.quarter
l[[paste0(factor, type, max.quarter)]] <- res
}
}
}
df.res <- data.frame(Reduce(rbind.all.columns, l))
tag <- "_40455055_2010"
file.out <- paste0("data_out/result_", public.filename, tag, ".csv")
write.csv(df.res, file.out, row.names = FALSE)
df.res <- read.csv("data_out/result_msci_market_factors_60_2010.csv")
df.res1 <- df.res[order(df.res$value), ]
df.res1 <- df.res1[!(duplicated(df.res1$Type)), ]
df.res1
# 4) Grid Search ----
if (FALSE) {
grid <- expand.grid(Alpha = seq(-0.005, 0.005, by=0.0025),
MKT = seq(-2, 2, 0.2),
RE = seq(-2, 2, 0.2))
print(nrow(grid))
val <- c()
for(i in 1:nrow(grid)) {
print(i)
par <- as.numeric(grid[i, ])
names(par) <- names(grid)
val <- c(val, npv.calc(par))
}
grid <- data.frame(grid)
grid$res <- val
g1 <- grid
head(g1[order(g1$res), ])
}
#### estimated model
# 1) load data -----
if(TRUE) {
files <- c("prep_preqin.R", "prep_public.R")
for(file in files) {
source(file)
if(sys.nframe() == 0L) rm(list = ls())
}
}
if(sys.nframe() == 0L) rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
df.preqin <- read.csv("data_prepared/preqin_cashflows.csv")
public.filename <- "public_returns"
public.filename <- "msci_market_factors"
# public.filename <- "q_factors"
df.public <- read.csv(paste0("data_prepared/", public.filename, ".csv"))
df.preqin$Date <- as.Date(df.preqin$Date)
df.public$Date <- as.Date(df.public$Date)
df0 <- merge(df.preqin, df.public, by="Date")
df0$Fund.ID <- as.factor(df0$Fund.ID)
df0$Alpha <- 1
# 2.1) getNPVs function ----
library(Rcpp)
Rcpp::cppFunction("
NumericVector getNPVs(NumericVector cf, NumericVector ret, int max_quarter){
int n = cf.length();
int i_max = std::min(max_quarter, n);
NumericVector VectorOut(i_max, 0.0);
for(int i = 0; i < i_max; ++i) {
VectorOut[i] = sum(cf / ret * ret[i]);
}
return VectorOut;
}
")
getNPVs(df0[1:1000, 7], df0[1:1000, 5], 10)
# 2.2) err.sqr.calc function ----
library(parallel)
err.sqr.calc <- function(par, max.quarter = 60) {
par0 <-  c("RF" = 1, par)
dfx <- split(df, df$Fund.ID)
f1 <- function(df.ss) {
Return <- exp(cumsum(log(1 + (as.matrix(df.ss[, names(par0)]) %*% par0))))
return(getNPVs(df.ss$CF, Return, max.quarter))
}
npvs <- parallel::mclapply(dfx, f1, mc.cores = 1)
y <- sum(unlist(npvs)^2)
return(y)
}
par <- c("MKT" = 1, "Alpha" = 0.05)
df <- df0[df0$type == "VC", ]
system.time(
print(err.sqr.calc(par)) # 205639240852
)
# 3.0) rbind all ----
rbind.all.columns <- function(x, y) {
x.diff <- setdiff(colnames(x), colnames(y))
y.diff <- setdiff(colnames(y), colnames(x))
x[, c(as.character(y.diff))] <- NA
y[, c(as.character(x.diff))] <- NA
return(rbind(x, y))
}
# 3) iterative run ----
library(optimx)
max.quarters <- c(40, 45, 50, 55, 60)
types <- levels(df0$type)
#types <- c("DD")
factors <- colnames(df.public)[4:ncol(df.public)] # msci_factors
#factors <- colnames(df.public)[3:6] # q_factors
#factors <- c( "ALL", factors)
l <- list()
for (factor in factors) {
for(max.quarter in max.quarters) {
for (type in types) {
print(paste(factor, max.quarter, type))
par <- c("MKT" = 0, "Alpha"=0)
par <- c("MKT" = 1)
if(factor == "ALL") {
for(fac in setdiff(factors, "ALL")) {
par[fac] <- 0
}
} else {
par[factor] <- 0
if ("ALL" %in% factors) break
}
df <- df0[df0$type == type, ]
res <- optimx::optimx(par, err.sqr.calc, max.quarter = max.quarter,
#lower = c("MKT" = -100, "RE" = -100, "Alpha" = -0.01),
#upper = c("MKT" = 100, "RE" = 100, "Alpha" = 0.01),
method = "L-BFGS-B"
#method = c("Nelder-Mead", "L-BFGS-B", "nlminb", "nlm", "ucminf")
#control = list(all.methods=TRUE)
)
res$Factor <- factor
res$Type <- type
res$max.quarter <- max.quarter
l[[paste0(factor, type, max.quarter)]] <- res
}
}
}
df.res <- data.frame(Reduce(rbind.all.columns, l))
tag <- "_4045505560_2013"
file.out <- paste0("data_out/result_", public.filename, tag, ".csv")
write.csv(df.res, file.out, row.names = FALSE)
df.res <- read.csv("data_out/result_msci_market_factors_60_2010.csv")
df.res1 <- df.res[order(df.res$value), ]
df.res1 <- df.res1[!(duplicated(df.res1$Type)), ]
df.res1
# 4) Grid Search ----
if (FALSE) {
grid <- expand.grid(Alpha = seq(-0.005, 0.005, by=0.0025),
MKT = seq(-2, 2, 0.2),
RE = seq(-2, 2, 0.2))
print(nrow(grid))
val <- c()
for(i in 1:nrow(grid)) {
print(i)
par <- as.numeric(grid[i, ])
names(par) <- names(grid)
val <- c(val, npv.calc(par))
}
grid <- data.frame(grid)
grid$res <- val
g1 <- grid
head(g1[order(g1$res), ])
}
#### estimated model
# 1) load data -----
if(TRUE) {
files <- c("prep_preqin.R", "prep_public.R")
for(file in files) {
source(file)
if(sys.nframe() == 0L) rm(list = ls())
}
}
if(sys.nframe() == 0L) rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
df.preqin <- read.csv("data_prepared/preqin_cashflows.csv")
public.filename <- "public_returns"
public.filename <- "msci_market_factors"
public.filename <- "q_factors"
df.public <- read.csv(paste0("data_prepared/", public.filename, ".csv"))
df.preqin$Date <- as.Date(df.preqin$Date)
df.public$Date <- as.Date(df.public$Date)
df0 <- merge(df.preqin, df.public, by="Date")
df0$Fund.ID <- as.factor(df0$Fund.ID)
df0$Alpha <- 1
# 2.1) getNPVs function ----
library(Rcpp)
Rcpp::cppFunction("
NumericVector getNPVs(NumericVector cf, NumericVector ret, int max_quarter){
int n = cf.length();
int i_max = std::min(max_quarter, n);
NumericVector VectorOut(i_max, 0.0);
for(int i = 0; i < i_max; ++i) {
VectorOut[i] = sum(cf / ret * ret[i]);
}
return VectorOut;
}
")
getNPVs(df0[1:1000, 7], df0[1:1000, 5], 10)
# 2.2) err.sqr.calc function ----
library(parallel)
err.sqr.calc <- function(par, max.quarter = 60) {
par0 <-  c("RF" = 1, par)
dfx <- split(df, df$Fund.ID)
f1 <- function(df.ss) {
Return <- exp(cumsum(log(1 + (as.matrix(df.ss[, names(par0)]) %*% par0))))
return(getNPVs(df.ss$CF, Return, max.quarter))
}
npvs <- parallel::mclapply(dfx, f1, mc.cores = 1)
y <- sum(unlist(npvs)^2)
return(y)
}
par <- c("MKT" = 1, "Alpha" = 0.05)
df <- df0[df0$type == "VC", ]
system.time(
print(err.sqr.calc(par)) # 205639240852
)
# 3.0) rbind all ----
rbind.all.columns <- function(x, y) {
x.diff <- setdiff(colnames(x), colnames(y))
y.diff <- setdiff(colnames(y), colnames(x))
x[, c(as.character(y.diff))] <- NA
y[, c(as.character(x.diff))] <- NA
return(rbind(x, y))
}
# 3) iterative run ----
library(optimx)
max.quarters <- c(40:60)
types <- levels(df0$type)
#types <- c("DD")
if public.filename == "msci_market_factors":
factors <- colnames(df.public)[4:ncol(df.public)] # msci_factors
if public.filename == "q_factors":
factors <- colnames(df.public)[3:6] # q_factors
#factors <- c( "ALL", factors)
l <- list()
for (factor in factors) {
for(max.quarter in max.quarters) {
for (type in types) {
print(paste(factor, max.quarter, type))
par <- c("MKT" = 0, "Alpha"=0)
par <- c("MKT" = 1)
if(factor == "ALL") {
for(fac in setdiff(factors, "ALL")) {
par[fac] <- 0
}
} else {
par[factor] <- 0
if ("ALL" %in% factors) break
}
df <- df0[df0$type == type, ]
res <- optimx::optimx(par, err.sqr.calc, max.quarter = max.quarter,
#lower = c("MKT" = -100, "RE" = -100, "Alpha" = -0.01),
#upper = c("MKT" = 100, "RE" = 100, "Alpha" = 0.01),
method = "L-BFGS-B"
#method = c("Nelder-Mead", "L-BFGS-B", "nlminb", "nlm", "ucminf")
#control = list(all.methods=TRUE)
)
res$Factor <- factor
res$Type <- type
res$max.quarter <- max.quarter
l[[paste0(factor, type, max.quarter)]] <- res
}
}
}
df.res <- data.frame(Reduce(rbind.all.columns, l))
tag <- "_4060_2010"
file.out <- paste0("data_out/result_", public.filename, tag, ".csv")
write.csv(df.res, file.out, row.names = FALSE)
df.res <- read.csv("data_out/result_msci_market_factors_60_2010.csv")
df.res1 <- df.res[order(df.res$value), ]
df.res1 <- df.res1[!(duplicated(df.res1$Type)), ]
df.res1
# 4) Grid Search ----
if (FALSE) {
grid <- expand.grid(Alpha = seq(-0.005, 0.005, by=0.0025),
MKT = seq(-2, 2, 0.2),
RE = seq(-2, 2, 0.2))
print(nrow(grid))
val <- c()
for(i in 1:nrow(grid)) {
print(i)
par <- as.numeric(grid[i, ])
names(par) <- names(grid)
val <- c(val, npv.calc(par))
}
grid <- data.frame(grid)
grid$res <- val
g1 <- grid
head(g1[order(g1$res), ])
}
